from celery.task import task
import pandas as pd
import pkg_resources
from os import mkdir
from os.path import isdir, join
from shutil import copyfile

basedir = "/data/static/data"

@task()
def process(ra=0.3, ri=0.3, phi=2.0, n=2.0, o=1.0, wt=0.1, h=1.0, nxy=1.0):
    """
      Antenna visualization backend
      This calls the application to process the user supplied values and
      outputs results as JSON
      args:
        ra=0.3; % [m] radius_a (think of it as the "width" if it was a rect)
        ri=0.3; % [m] radius_i (think of it as the "length" if it was a rect)
        phi=2;  % [deg] sets the "pitch"
        n=2;    % number of turns going along the z-direction
        o=1;    % orientable (clock-wise or counter clock-wise)
        wt=0.1; % [m] wire thickness
        h=(1.1)*(2*wt*n); % height of the multi-coiled wire antenna
        nxy=1;  % number of turns along the xy-plane

      returns:
        {"x":[1.0,2.0,3.0,n],
         "y":[1.0,2.0,3.0,n],
         "z":[1.0,2.0,3.0,n],
         "BX":[1.0,2.0,3.0,n],
         "BY":[1.0,2.0,3.0,n],
         "BZ":[1.0,2.0,3.0,n]}
    """
    try:
        s_ra = float(ra)
        s_ri = float(ri)
        s_phi = float(phi)
        s_n = float(n)
        s_o = float(o)
        s_wt = float(wt)
        s_h = float(h)
        s_nxy = float(nxy)
    except ValueError:
        return {"error": "Inputs must be numeric"}


    # TODO: Add code to call backend with parameters and remove example values below

    return {
        "x":[
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469, -1.41959183673469,
            -1.41959183673469, -1.41959183673469, -1.41959183673469
        ],
        "y":[
            -1.48, -1.41959183673469, -1.35918367346939, -1.29877551020408, -1.23836734693878, -1.17795918367347,
            -1.11755102040816, -1.05714285714286, -0.996734693877551, -0.936326530612245, -0.875918367346939,
            -0.815510204081633, -0.755102040816327, -0.69469387755102, -0.634285714285714, -0.573877551020408,
            -0.513469387755102, -0.453061224489796, -0.39265306122449, -0.332244897959184, -0.271836734693877,
            -0.211428571428572, -0.151020408163265, -0.090612244897959, -0.030204081632653, 0.030204081632653,
            0.090612244897959, 0.151020408163265, 0.211428571428571, 0.271836734693878, 0.332244897959184, 0.39265306122449,
            0.453061224489796, 0.513469387755102, 0.573877551020408, 0.634285714285714, 0.69469387755102, 0.755102040816326,
            0.815510204081633, 0.875918367346939, 0.936326530612245, 0.996734693877551, 1.05714285714286, 1.11755102040816,
            1.17795918367347, 1.23836734693878, 1.29877551020408, 1.35918367346939, 1.41959183673469, 1.48, -1.48,
            -1.41959183673469, -1.35918367346939, -1.29877551020408, -1.23836734693878, -1.17795918367347,
            -1.11755102040816, -1.05714285714286, -0.996734693877551, -0.936326530612245, -0.875918367346939,
            -0.815510204081633, -0.755102040816327, -0.69469387755102, -0.634285714285714, -0.573877551020408,
            -0.513469387755102, -0.453061224489796, -0.39265306122449, -0.332244897959184, -0.271836734693877,
            -0.211428571428572, -0.151020408163265, -0.090612244897959, -0.030204081632653, 0.030204081632653,
            0.090612244897959, 0.151020408163265, 0.211428571428571, 0.271836734693878, 0.332244897959184, 0.39265306122449,
            0.453061224489796, 0.513469387755102, 0.573877551020408, 0.634285714285714, 0.69469387755102, 0.755102040816326,
            0.815510204081633, 0.875918367346939, 0.936326530612245, 0.996734693877551, 1.05714285714286, 1.11755102040816,
            1.17795918367347, 1.23836734693878, 1.29877551020408, 1.35918367346939, 1.41959183673469, 1.48
        ],
        "z":[
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48, -1.48,
            -1.48, -1.48, -1.48, -1.48
        ],
        "BX":[
            -0.00000000947695561730, -0.00000001012766443581, -0.00000001081152761485, -0.00000001152769763215,
            -0.00000001227477087669, -0.00000001305071502209, -0.00000001385279971072, -0.00000001467753413106,
            -0.00000001552061565587, -0.00000001637689418324, -0.00000001724035711388, -0.00000001810413992259,
            -0.00000001896056696193, -0.00000001980122640072, -0.00000002061708200474, -0.00000002139862280200,
            -0.00000002213604958129, -0.00000002281949474676, -0.00000002343926945179, -0.00000002398612937168,
            -0.00000002445154819776, -0.00000002482798620337, -0.00000002510914028748, -0.00000002529016192683,
            -0.00000002536783055845, -0.00000002534067205522, -0.00000002520901501135, -0.00000002497498127496,
            -0.00000002464241121996, -0.00000002421672826467, -0.00000002370475074925, -0.00000002311446216095,
            -0.00000002245475261637, -0.00000002173514536254, -0.00000002096552184942, -0.00000002015585777263,
            -0.00000001931598058680, -0.00000001845535659632, -0.00000001758291310445, -0.00000001670689849082,
            -0.00000001583478069313, -0.00000001497318253976, -0.00000001412785080139, -0.00000001330365473147,
            -0.00000001250460922766, -0.00000001173391751816, -0.00000001099402838171, -0.00000001028670326689,
            -0.00000000961308920149, -0.00000000897379400351, -0.00000000973270413247, -0.00000001041990783422,
            -0.00000001114398461061, -0.00000001190423849893, -0.00000001269937191930, -0.00000001352739997376,
            -0.00000001438556711910, -0.00000001527027026700, -0.00000001617699312381, -0.00000001710025723475,
            -0.00000001803359565162, -0.00000001896955529808, -0.00000001989973385567, -0.00000002081485624250,
            -0.00000002170489443485, -0.00000002255923246392, -0.00000002336687593927, -0.00000002411670251531,
            -0.00000002479774651352, -0.00000002539950770083, -0.00000002591227131761, -0.00000002632742418392,
            -0.00000002663775040477, -0.00000002683769009421, -0.00000002692354577896, -0.00000002689362371791,
            -0.00000002674830111757, -0.00000002649001482387, -0.00000002612317210145, -0.00000002565398909111,
            -0.00000002509026698730, -0.00000002444111949364, -0.00000002371666740867, -0.00000002292771713234,
            -0.00000002208543948781, -0.00000002120106368770, -0.00000002028559880579, -0.00000001934959207258,
            -0.00000001840293003432, -0.00000001745468540898, -0.00000001651300958811, -0.00000001558506834287,
            -0.00000001467701648863, -0.00000001379400606520, -0.00000001294022196082, -0.00000001211893876967,
            -0.00000001133259292256, -0.00000001058286466190, -0.00000000987076514087, -0.00000000919672472325
        ],
        "BY":[
            -0.0000000088105942, -0.0000000090268628, -0.0000000092203247, -0.0000000093862538, -0.0000000095196037,
            -0.0000000096150628, -0.0000000096671288, -0.0000000096702063, -0.0000000096187250, -0.0000000095072819,
            -0.0000000093308031, -0.0000000090847240, -0.0000000087651820, -0.0000000083692155, -0.0000000078949605,
            -0.0000000073418346, -0.0000000067106982, -0.0000000060039799, -0.0000000052257564, -0.0000000043817767,
            -0.0000000034794224, -0.0000000025276015, -0.0000000015365744, -0.0000000005177164, 0.0000000005167732,
            0.0000000015542052, 0.0000000025817590, 0.0000000035868492, 0.0000000045574813, 0.0000000054825786,
            0.0000000063522641, 0.0000000071580864, 0.0000000078931799, 0.0000000085523570, 0.0000000091321322,
            0.0000000096306837, 0.0000000100477595, 0.0000000103845386, 0.0000000106434596, 0.0000000108280267,
            0.0000000109426061, 0.0000000109922215, 0.0000000109823580, 0.0000000109187802, 0.0000000108073700,
            0.0000000106539858, 0.0000000104643458, 0.0000000102439340, 0.0000000099979288, 0.0000000097311517,
            -0.0000000094428404, -0.0000000096933518, -0.0000000099205371, -0.0000000101191380, -0.0000000102834970,
            -0.0000000104076138, -0.0000000104852245, -0.0000000105099072, -0.0000000104752143, -0.0000000103748328,
            -0.0000000102027699, -0.0000000099535634, -0.0000000096225082, -0.0000000092058936, -0.0000000087012411,
            -0.0000000081075296, -0.0000000074253955, -0.0000000066572931, -0.0000000058076007, -0.0000000048826613,
            -0.0000000038907464, -0.0000000028419383, -0.0000000017479299, -0.0000000006217465, 0.0000000005225999,
            0.0000000016705075, 0.0000000028072149, 0.0000000039182392, 0.0000000049898021, 0.0000000060092196,
            0.0000000069652358, 0.0000000078482881, 0.0000000086506910, 0.0000000093667374, 0.0000000099927165,
            0.0000000105268570, 0.0000000109692042, 0.0000000113214453, 0.0000000115866967, 0.0000000117692684,
            0.0000000118744184, 0.0000000119081096, 0.0000000118767796, 0.0000000117871294, 0.0000000116459373,
            0.0000000114599012, 0.0000000112355080, 0.0000000109789328, 0.0000000106959631, 0.0000000103919475
        ],
        "BZ":[
            -0.0000000003321886, -0.0000000006030093, -0.0000000008980795, -0.0000000012176088, -0.0000000015614546,
            -0.0000000019290609, -0.0000000023193969, -0.0000000027308989, -0.0000000031614181, -0.0000000036081789,
            -0.0000000040677505, -0.0000000045360381, -0.0000000050082951, -0.0000000054791629, -0.0000000059427390,
            -0.0000000063926757, -0.0000000068223099, -0.0000000072248207, -0.0000000075934125, -0.0000000079215144,
            -0.0000000082029909, -0.0000000084323503, -0.0000000086049431, -0.0000000087171363, -0.0000000087664554,
            -0.0000000087516837, -0.0000000086729132, -0.0000000085315437, -0.0000000083302297, -0.0000000080727787,
            -0.0000000077640078, -0.0000000074095660, -0.0000000070157349, -0.0000000065892169, -0.0000000061369236,
            -0.0000000056657740, -0.0000000051825105, -0.0000000046935404, -0.0000000042048057, -0.0000000037216851,
            -0.0000000032489254, -0.0000000027906048, -0.0000000023501202, -0.0000000019301997, -0.0000000015329317,
            -0.0000000011598096, -0.0000000008117860, -0.0000000004893325, -0.0000000001925036, 0.0000000000790002,
            -0.0000000006108503, -0.0000000009204601, -0.0000000012582623, -0.0000000016246328, -0.0000000020195485,
            -0.0000000024425126, -0.0000000028924781, -0.0000000033677744, -0.0000000038660401, -0.0000000043841663,
            -0.0000000049182566, -0.0000000054636085, -0.0000000060147210, -0.0000000065653350, -0.0000000071085089,
            -0.0000000076367331, -0.0000000081420825, -0.0000000086164060, -0.0000000090515484, -0.0000000094395950,
            -0.0000000097731313, -0.0000000100455020, -0.0000000102510583, -0.0000000103853766, -0.0000000104454368,
            -0.0000000104297472, -0.0000000103384091, -0.0000000101731156, -0.0000000099370849, -0.0000000096349326,
            -0.0000000092724913, -0.0000000088565889, -0.0000000083947996, -0.0000000078951814, -0.0000000073660150,
            -0.0000000068155567, -0.0000000062518156, -0.0000000056823630, -0.0000000051141797, -0.0000000045535415,
            -0.0000000040059452, -0.0000000034760694, -0.0000000029677685, -0.0000000024840938, -0.0000000020273361,
            -0.0000000015990849, -0.0000000012002975, -0.0000000008313756, -0.0000000004922436, -0.0000000001824253
        ]
   }


@task(bind=True)
def process_to_file(self, ra=0.3, ri=0.3, phi=2.0, n=2.0, o=1.0, wt=0.1, h=1.0, nxy=1.0):
    """
      Antenna visualization backend
      This calls the application to process the user supplied values
      args:
        ra=0.3; % [m] radius_a (think of it as the "width" if it was a rect)
        ri=0.3; % [m] radius_i (think of it as the "length" if it was a rect)
        phi=2;  % [deg] sets the "pitch"
        n=2;    % number of turns going along the z-direction
        o=1;    % orientable (clock-wise or counter clock-wise)
        wt=0.1; % [m] wire thickness
        h=(1.1)*(2*wt*n); % height of the multi-coiled wire antenna
        nxy=1;  % number of turns along the xy-plane

      returns:
        {"file": "<url>"}
    """
    
    # TODO: Add code to call backend with parameters and remove example file

    example_path = pkg_resources.resource_filename(__name__, 'data/BFields_WireAnt.csv')
    output_path = join(basedir, self.request.id)
    if not isdir(output_path):
        mkdir(output_path)

    output_file = join(output_path, "output.csv")
    copyfile(example_path, output_file)

    file_url = "/data/{0}/output.csv".format(self.request.id)
    return {"file": file_url}


@task(bind=True)
def process_to_json(self, ra=0.3, ri=0.3, phi=2.0, n=2.0, o=1.0, wt=0.1, h=1.0, nxy=1.0):
    """
      Antenna visualization backend
      This calls the application to process the user supplied values
      args:
        ra=0.3; % [m] radius_a (think of it as the "width" if it was a rect)
        ri=0.3; % [m] radius_i (think of it as the "length" if it was a rect)
        phi=2;  % [deg] sets the "pitch"
        n=2;    % number of turns going along the z-direction
        o=1;    % orientable (clock-wise or counter clock-wise)
        wt=0.1; % [m] wire thickness
        h=(1.1)*(2*wt*n); % height of the multi-coiled wire antenna
        nxy=1;  % number of turns along the xy-plane

      returns:
        {"file": "<url>"}
    """
    
    # TODO: Add code to call backend with parameters and remove example file

    example_path = pkg_resources.resource_filename(__name__, 'data/BFields_WireAnt.csv')
    output_path = join(basedir, self.request.id)
    if not isdir(output_path):
        mkdir(output_path)

    #TODO: change to read backend output instead of example data
    output_file = join(output_path, "output.json")
    pd.from_csv(example_path).to_json(output_file, orient="records")

    file_url = "/data/{0}/output.json".format(self.request.id)
    return {"file": file_url}
